{"version":3,"sources":["webpack:///./src/pages/about.tsx","webpack:///./src/components/SEO/facebook.tsx","webpack:///./src/components/SEO/twitter.tsx","webpack:///./src/components/SEO/index.tsx"],"names":["About","pageAnimation","useSpring","config","slow","from","opacity","to","title","desc","style","py","px","Facebook","url","image","locale","name","type","Helmet","property","content","defaultProps","Twitter","username","SEO","banner","pathname","node","individual","site","buildTime","siteMetadata","siteUrl","defaultTitle","defaultDescription","defaultBanner","headline","siteLanguage","ogLanguage","author","twitter","facebook","seo","description","schemaOrgWebPage","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","creator","publisher","datePublished","dateModified","itemListElement","item","position","schemaArticle","logo","birthTime","modifiedTime","push","breadcrumb","lang","JSON","stringify"],"mappings":"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","file":"component---src-pages-about-tsx-7e00867d5c23755e0d6d.js","sourcesContent":["import React from \"react\";\nimport { config, useSpring } from \"react-spring\";\nimport Layout from \"../components/layout\";\nimport { AnimatedBox } from \"../elements\";\nimport SEO from \"../components/SEO\";\n\nconst About = () => {\n  const pageAnimation = useSpring({\n    config: config.slow,\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"About\" desc=\"Hi. I'm qingLan!\" />\n      <AnimatedBox\n        style={pageAnimation}\n        py={[6, 6, 6, 8]}\n        px={[6, 6, 8, 6, 8, 13]}\n      >\n        <h1>Hi. I'm 青lan!</h1>\n        <p>\n          生长在魔都，离家去国十年，混迹纽约,\n          在mbb中的一家工作，运用技术手段帮助500强企业实现战略转型。\n        </p>\n        <p>\n          最近打算开始基于平时做的项目写一些关于数字化转型，企业创投的短文。希望大家能喜欢。\n        </p>\n        <p>\n          I grew up in Shanghai, moved to the US 10 years ago. Currently living\n          in New York and working in a consulting firm (one of MBB), I\n          specialize in leveraging technology to solve business problems for\n          Fortune 500 clients and build disruptive vetures with them and get our\n          clients ready for the upcoming challenges in the next 10 years.\n        </p>\n        <p>\n          Recently, I have started a short tech business blog that focuses at\n          digital transformation and corp venture building based on the projects\n          and cases I have worked on. Hope you like it.\n        </p>\n      </AnimatedBox>\n    </Layout>\n  );\n};\n\nexport default About;\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype Props = { url: string; title: string; desc: string; image: string; locale: string } & typeof defaultProps\n\nconst defaultProps = {\n  name: '',\n  type: 'website',\n}\n\nconst Facebook = ({ url, title, desc, image, locale, name, type }: Props) => (\n  <Helmet>\n    {name && <meta property=\"og:site_name\" content={name} />}\n    <meta property=\"og:locale\" content={locale} />\n    <meta property=\"og:url\" content={url} />\n    <meta property=\"og:type\" content={type} />\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={desc} />\n    <meta property=\"og:image\" content={image} />\n    <meta property=\"og:image:alt\" content={desc} />\n  </Helmet>\n)\n\nFacebook.defaultProps = defaultProps\n\nexport default Facebook\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype Props = { title: string; desc: string; image: string } & typeof defaultProps\n\nconst defaultProps = {\n  username: '',\n}\n\nconst Twitter = ({ username, title, desc, image }: Props) => (\n  <Helmet>\n    {username && <meta name=\"twitter:creator\" content={username} />}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={desc} />\n    <meta name=\"twitter:image\" content={image} />\n    <meta name=\"twitter:image:alt\" content={desc} />\n  </Helmet>\n)\n\nexport default Twitter\n\nTwitter.defaultProps = defaultProps\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Facebook from \"./facebook\";\nimport Twitter from \"./twitter\";\n\ntype Props = {} & typeof defaultProps;\n\nconst defaultProps = {\n  title: \"\",\n  desc: \"\",\n  banner: \"\",\n  pathname: \"\",\n  node: {\n    modifiedTime: \"\",\n    birthTime: \"\",\n  },\n  individual: false,\n};\n\nconst SEO = ({ title, desc, banner, pathname, node, individual }: Props) => {\n  const { site } = useStaticQuery(query);\n\n  const {\n    buildTime,\n    siteMetadata: {\n      siteUrl,\n      defaultTitle,\n      defaultDescription,\n      defaultBanner,\n      headline,\n      siteLanguage,\n      ogLanguage,\n      author,\n      twitter,\n      facebook,\n    },\n  } = site;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: desc || defaultDescription,\n    image: `${siteUrl}${banner || defaultBanner}`,\n    url: `${siteUrl}${pathname || \"\"}`,\n  };\n\n  // schema.org in JSONLD format\n  // https://developers.google.com/search/docs/guides/intro-structured-data\n  // You can fill out the 'author', 'creator' with more data or another type (e.g. 'Organization')\n\n  const schemaOrgWebPage = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"WebPage\",\n    url: siteUrl,\n    headline,\n    inLanguage: siteLanguage,\n    mainEntityOfPage: siteUrl,\n    description: defaultDescription,\n    name: defaultTitle,\n    author: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    copyrightHolder: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    copyrightYear: \"2019\",\n    creator: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    datePublished: \"2019-03-10T10:30:00+01:00\",\n    dateModified: buildTime,\n    image: {\n      \"@type\": \"ImageObject\",\n      url: `${siteUrl}${defaultBanner}`,\n    },\n  };\n\n  // Initial breadcrumb list\n\n  const itemListElement = [\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": siteUrl,\n        name: \"Homepage\",\n      },\n      position: 1,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/about`,\n        name: \"About\",\n      },\n      position: 2,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/projects`,\n        name: \"About\",\n      },\n      position: 3,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/instagram`,\n        name: \"About\",\n      },\n      position: 4,\n    },\n  ];\n\n  let schemaArticle = null;\n\n  if (individual) {\n    schemaArticle = {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"Article\",\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      copyrightHolder: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      copyrightYear: \"2019\",\n      creator: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: author,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: `${siteUrl}${defaultBanner}`,\n        },\n      },\n      datePublished: node ? node.birthTime : \"2019-03-10T10:30:00+01:00\",\n      dateModified: node ? node.modifiedTime : \"2019-03-10T10:30:00+01:00\",\n      description: seo.description,\n      headline: seo.title,\n      inLanguage: \"en\",\n      url: seo.url,\n      name: seo.title,\n      image: {\n        \"@type\": \"ImageObject\",\n        url: seo.image,\n      },\n      mainEntityOfPage: seo.url,\n    };\n    // Push current blogpost into breadcrumb list\n    itemListElement.push({\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": seo.url,\n        name: seo.title,\n      },\n      position: 5,\n    });\n  }\n\n  const breadcrumb = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    description: \"Breadcrumbs list\",\n    name: \"Breadcrumbs\",\n    itemListElement,\n  };\n\n  return (\n    <>\n      <Helmet title={seo.title}>\n        <html lang={siteLanguage} />\n        <meta name=\"description\" content={seo.description} />\n        <meta name=\"image\" content={seo.image} />\n        <meta name=\"gatsby-starter\" content=\"\" />\n        {/* Insert schema.org data conditionally (webpage/article) + everytime (breadcrumbs) */}\n        {!individual && (\n          <script type=\"application/ld+json\">\n            {JSON.stringify(schemaOrgWebPage)}\n          </script>\n        )}\n        {individual && (\n          <script type=\"application/ld+json\">\n            {JSON.stringify(schemaArticle)}\n          </script>\n        )}\n        <script type=\"application/ld+json\">{JSON.stringify(breadcrumb)}</script>\n      </Helmet>\n      <Facebook\n        desc={seo.description}\n        image={seo.image}\n        title={seo.title}\n        type={individual ? \"article\" : \"website\"}\n        url={seo.url}\n        locale={ogLanguage}\n        name={facebook}\n      />\n      <Twitter\n        title={seo.title}\n        image={seo.image}\n        desc={seo.description}\n        username={twitter}\n      />\n    </>\n  );\n};\n\nexport default SEO;\n\nSEO.defaultProps = defaultProps;\n\nconst query = graphql`\n  query SEO {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD\")\n      siteMetadata {\n        siteUrl\n        defaultTitle: titleAlt\n        defaultDescription: description\n        defaultBanner: logo\n        headline\n        siteLanguage\n        ogLanguage\n        author\n        twitter\n        facebook\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}