{"version":3,"sources":["webpack:///./src/components/SEO/facebook.tsx","webpack:///./src/components/SEO/twitter.tsx","webpack:///./src/components/SEO/index.tsx","webpack:///./src/templates/project.tsx"],"names":["Facebook","url","title","desc","image","locale","name","type","Helmet","property","content","defaultProps","Twitter","username","SEO","banner","pathname","node","individual","site","buildTime","siteMetadata","siteUrl","defaultTitle","defaultDescription","defaultBanner","headline","siteLanguage","ogLanguage","author","twitter","facebook","seo","description","schemaOrgWebPage","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","creator","publisher","datePublished","dateModified","itemListElement","item","position","schemaArticle","logo","birthTime","modifiedTime","push","breadcrumb","lang","JSON","stringify","PBox","styled","AnimatedBox","Content","Box","props","transparentize","bg","theme","space","breakpoints","Category","fontSizes","Description","animated","div","PButton","Button","color","readableColor","Project","data","project","images","categoryAnimation","useSpring","config","slow","from","opacity","transform","to","titleAnimation","delay","descAnimation","imagesAnimation","slug","title_detail","parent","cover","childImageSharp","resize","src","py","px","style","category","h1","dangerouslySetInnerHTML","__html","nodes","map","alt","key","fluid","textAlign","query"],"mappings":"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","file":"component---src-templates-project-tsx-f7be2bac482b926e2521.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype Props = { url: string; title: string; desc: string; image: string; locale: string } & typeof defaultProps\n\nconst defaultProps = {\n  name: '',\n  type: 'website',\n}\n\nconst Facebook = ({ url, title, desc, image, locale, name, type }: Props) => (\n  <Helmet>\n    {name && <meta property=\"og:site_name\" content={name} />}\n    <meta property=\"og:locale\" content={locale} />\n    <meta property=\"og:url\" content={url} />\n    <meta property=\"og:type\" content={type} />\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={desc} />\n    <meta property=\"og:image\" content={image} />\n    <meta property=\"og:image:alt\" content={desc} />\n  </Helmet>\n)\n\nFacebook.defaultProps = defaultProps\n\nexport default Facebook\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype Props = { title: string; desc: string; image: string } & typeof defaultProps\n\nconst defaultProps = {\n  username: '',\n}\n\nconst Twitter = ({ username, title, desc, image }: Props) => (\n  <Helmet>\n    {username && <meta name=\"twitter:creator\" content={username} />}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={desc} />\n    <meta name=\"twitter:image\" content={image} />\n    <meta name=\"twitter:image:alt\" content={desc} />\n  </Helmet>\n)\n\nexport default Twitter\n\nTwitter.defaultProps = defaultProps\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Facebook from \"./facebook\";\nimport Twitter from \"./twitter\";\n\ntype Props = {} & typeof defaultProps;\n\nconst defaultProps = {\n  title: \"\",\n  desc: \"\",\n  banner: \"\",\n  pathname: \"\",\n  node: {\n    modifiedTime: \"\",\n    birthTime: \"\",\n  },\n  individual: false,\n};\n\nconst SEO = ({ title, desc, banner, pathname, node, individual }: Props) => {\n  const { site } = useStaticQuery(query);\n\n  const {\n    buildTime,\n    siteMetadata: {\n      siteUrl,\n      defaultTitle,\n      defaultDescription,\n      defaultBanner,\n      headline,\n      siteLanguage,\n      ogLanguage,\n      author,\n      twitter,\n      facebook,\n    },\n  } = site;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: desc || defaultDescription,\n    image: `${siteUrl}${banner || defaultBanner}`,\n    url: `${siteUrl}${pathname || \"\"}`,\n  };\n\n  // schema.org in JSONLD format\n  // https://developers.google.com/search/docs/guides/intro-structured-data\n  // You can fill out the 'author', 'creator' with more data or another type (e.g. 'Organization')\n\n  const schemaOrgWebPage = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"WebPage\",\n    url: siteUrl,\n    headline,\n    inLanguage: siteLanguage,\n    mainEntityOfPage: siteUrl,\n    description: defaultDescription,\n    name: defaultTitle,\n    author: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    copyrightHolder: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    copyrightYear: \"2019\",\n    creator: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: author,\n    },\n    datePublished: \"2019-03-10T10:30:00+01:00\",\n    dateModified: buildTime,\n    image: {\n      \"@type\": \"ImageObject\",\n      url: `${siteUrl}${defaultBanner}`,\n    },\n  };\n\n  // Initial breadcrumb list\n\n  const itemListElement = [\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": siteUrl,\n        name: \"Homepage\",\n      },\n      position: 1,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/about`,\n        name: \"About\",\n      },\n      position: 2,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/projects`,\n        name: \"About\",\n      },\n      position: 3,\n    },\n    {\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": `${siteUrl}/instagram`,\n        name: \"About\",\n      },\n      position: 4,\n    },\n  ];\n\n  let schemaArticle = null;\n\n  if (individual) {\n    schemaArticle = {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"Article\",\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      copyrightHolder: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      copyrightYear: \"2019\",\n      creator: {\n        \"@type\": \"Person\",\n        name: author,\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: author,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: `${siteUrl}${defaultBanner}`,\n        },\n      },\n      datePublished: node ? node.birthTime : \"2019-03-10T10:30:00+01:00\",\n      dateModified: node ? node.modifiedTime : \"2019-03-10T10:30:00+01:00\",\n      description: seo.description,\n      headline: seo.title,\n      inLanguage: \"en\",\n      url: seo.url,\n      name: seo.title,\n      image: {\n        \"@type\": \"ImageObject\",\n        url: seo.image,\n      },\n      mainEntityOfPage: seo.url,\n    };\n    // Push current blogpost into breadcrumb list\n    itemListElement.push({\n      \"@type\": \"ListItem\",\n      item: {\n        \"@id\": seo.url,\n        name: seo.title,\n      },\n      position: 5,\n    });\n  }\n\n  const breadcrumb = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    description: \"Breadcrumbs list\",\n    name: \"Breadcrumbs\",\n    itemListElement,\n  };\n\n  return (\n    <>\n      <Helmet title={seo.title}>\n        <html lang={siteLanguage} />\n        <meta name=\"description\" content={seo.description} />\n        <meta name=\"image\" content={seo.image} />\n        <meta name=\"gatsby-starter\" content=\"\" />\n        {/* Insert schema.org data conditionally (webpage/article) + everytime (breadcrumbs) */}\n        {!individual && (\n          <script type=\"application/ld+json\">\n            {JSON.stringify(schemaOrgWebPage)}\n          </script>\n        )}\n        {individual && (\n          <script type=\"application/ld+json\">\n            {JSON.stringify(schemaArticle)}\n          </script>\n        )}\n        <script type=\"application/ld+json\">{JSON.stringify(breadcrumb)}</script>\n      </Helmet>\n      <Facebook\n        desc={seo.description}\n        image={seo.image}\n        title={seo.title}\n        type={individual ? \"article\" : \"website\"}\n        url={seo.url}\n        locale={ogLanguage}\n        name={facebook}\n      />\n      <Twitter\n        title={seo.title}\n        image={seo.image}\n        desc={seo.description}\n        username={twitter}\n      />\n    </>\n  );\n};\n\nexport default SEO;\n\nSEO.defaultProps = defaultProps;\n\nconst query = graphql`\n  query SEO {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD\")\n      siteMetadata {\n        siteUrl\n        defaultTitle: titleAlt\n        defaultDescription: description\n        defaultBanner: logo\n        headline\n        siteLanguage\n        ogLanguage\n        author\n        twitter\n        facebook\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { transparentize, readableColor } from 'polished'\nimport styled from 'styled-components'\nimport { config, useSpring, animated } from 'react-spring'\nimport Layout from '../components/layout'\nimport { Box, AnimatedBox, Button } from '../elements'\nimport SEO from '../components/SEO'\n\nconst PBox = styled(AnimatedBox)`\n  max-width: 1400px;\n  margin: 0 auto;\n`\n\nconst Content = styled(Box)<{ bg: string }>`\n  background-color: ${(props) => transparentize(0.9, props.bg)};\n\n  .gatsby-image-wrapper:not(:last-child) {\n    margin-bottom: ${(props) => props.theme.space[10]};\n\n    @media (max-width: ${(props) => props.theme.breakpoints[3]}) {\n      margin-bottom: ${(props) => props.theme.space[8]};\n    }\n  }\n`\n\nconst Category = styled(AnimatedBox)`\n  letter-spacing: 0.05em;\n  font-size: ${(props) => props.theme.fontSizes[1]};\n  text-transform: uppercase;\n`\n\nconst Description = styled(animated.div)`\n  max-width: 960px;\n  letter-spacing: -0.003em;\n  --baseline-multiplier: 0.179;\n  --x-height-multiplier: 0.35;\n  line-height: 1.58;\n`\n\nconst PButton = styled(Button)<{ color: string }>`\n  background: ${(props) => (props.color === 'white' ? 'black' : props.color)};\n  color: ${(props) => readableColor(props.color === 'white' ? 'black' : props.color)};\n`\n\ntype PageProps = {\n  data: {\n    project: {\n      title_detail: string\n      color: string\n      category: string\n      desc: string\n      slug: string\n      parent: {\n        modifiedTime: string\n        birthTime: string\n      }\n      cover: {\n        childImageSharp: {\n          resize: {\n            src: string\n          }\n        }\n      }\n    }\n    images: {\n      nodes: {\n        name: string\n        childImageSharp: {\n          fluid: {\n            aspectRatio: number\n            src: string\n            srcSet: string\n            sizes: string\n            base64: string\n            tracedSVG: string\n            srcWebp: string\n            srcSetWebp: string\n          }\n        }\n      }[]\n    }\n  }\n}\n\nconst Project: React.FunctionComponent<PageProps> = ({ data: { project, images } }) => {\n  const categoryAnimation = useSpring({\n    config: config.slow,\n    from: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\n    to: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\n  })\n\n  const titleAnimation = useSpring({ config: config.slow, delay: 300, from: { opacity: 0 }, to: { opacity: 1 } })\n  const descAnimation = useSpring({ config: config.slow, delay: 600, from: { opacity: 0 }, to: { opacity: 1 } })\n  const imagesAnimation = useSpring({ config: config.slow, delay: 800, from: { opacity: 0 }, to: { opacity: 1 } })\n\n  return (\n    <Layout color={project.color}>\n      <SEO\n        pathname={project.slug}\n        title={`${project.title_detail} | Jodie`}\n        desc={project.desc}\n        node={project.parent}\n        banner={project.cover.childImageSharp.resize.src}\n        individual\n      />\n      <PBox py={10} px={[6, 6, 8, 10]}>\n        <Category style={categoryAnimation}>{project.category}</Category>\n        <animated.h1 style={titleAnimation}>{project.title_detail}</animated.h1>\n        <Description style={descAnimation}>\n          <div dangerouslySetInnerHTML={{ __html: project.desc }} />\n        </Description>\n      </PBox>\n      <Content bg={project.color} py={10}>\n        <PBox style={imagesAnimation} px={[6, 6, 8, 10]}>\n          {images.nodes.map((image) => (\n            <Img alt={image.name} key={image.childImageSharp.fluid.src} fluid={image.childImageSharp.fluid} />\n          ))}\n        </PBox>\n      </Content>\n      <PBox style={{ textAlign: 'center' }} py={10} px={[6, 6, 8, 10]}>\n        <h2>Want to start your own project?</h2>\n        <PButton color={project.color} py={4} px={8}>\n          Contact Us\n        </PButton>\n      </PBox>\n    </Layout>\n  )\n}\n\nexport default Project\n\nexport const query = graphql`\n  query ProjectTemplate($slug: String!, $images: String!) {\n    project: projectsYaml(slug: { eq: $slug }) {\n      title_detail\n      color\n      category\n      desc\n      slug\n      parent {\n        ... on File {\n          modifiedTime\n          birthTime\n        }\n      }\n      cover {\n        childImageSharp {\n          resize(width: 1200, height: 675, quality: 80) {\n            src\n          }\n        }\n      }\n    }\n    images: allFile(filter: { relativePath: { regex: $images } }, sort: { fields: name, order: ASC }) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(quality: 95, maxWidth: 1200) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}